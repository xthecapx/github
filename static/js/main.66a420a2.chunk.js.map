{"version":3,"sources":["api/index.js","api/useRequest.tsx","resources/Form.tsx","components/Search.tsx","components/User.tsx","components/Results.tsx","components/Home.tsx","components/useTimer.ts","components/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetcher","url","fetch","then","r","json","useRequest","path","query","useContext","FormContext","page","count","dispatch","targetUser","useSwr","data","error","isValidating","useEffect","type","payload","apiCount","Math","ceil","total_count","normalizedCount","user","items","length","random","login","initialState","form","searchParam","loading","appStatus","reducer","state","action","Error","createContext","changePageHandler","updateField","FormProvider","children","useReducer","Provider","value","e","target","name","event","Search","onSubmit","preventDefault","autoComplete","Grid","container","spacing","direction","justify","alignItems","item","xs","TextField","onChange","placeholder","label","variant","fullWidth","Button","disabled","User","avatar_url","html_url","followers_url","subscriptions_url","organizations_url","repos_url","useState","openSnackbar","setOpenSnackbar","open","window","anchorEl","setAnchorEl","handleClose","closeSnackBar","reason","severity","Card","CardHeader","avatar","Avatar","aria-label","alt","src","IconButton","onClick","currentTarget","Menu","id","keepMounted","Boolean","onClose","MenuItem","title","subheader","CardActions","size","color","Snackbar","autoHideDuration","warning","success","Results","undefined","map","key","Pagination","Home","history","useHistory","List","dense","ListItem","ListItemText","primary","push","useTimer","seconds","setSeconds","intervalRef","useRef","isActive","clearIntervalRef","current","clearInterval","setInterval","Timer","className","App","exact","to","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.66a420a2.chunk.js","sourcesContent":["export const fetcher = (url) => fetch(url).then((r) => r.json());\n\nexport { useRequest } from './useRequest';\n","import { useContext, useEffect } from \"react\";\nimport useSwr from \"swr\";\nimport { FormContext } from \"../resources/Form\";\nimport { fetcher } from \"./\";\n\nconst baseUrl = \"https://api.github.com/search\";\n\nexport type ItemType = {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n  score: number;\n};\n\nexport type Data = {\n  total_count: number;\n  incomplete_results: boolean;\n  items: ItemType[];\n};\n\nexport const PAGE_SIZE = 12;\n\nfunction getRandomUser(items: ItemType[]) {\n  return items[(items.length * Math.random()) | 0];\n}\n\nexport const useRequest = (path?: string, query?: string): any => {\n  const { page, count, dispatch, targetUser } = useContext(FormContext);\n  const url = `${baseUrl}${path}&per_page=${PAGE_SIZE}&page=${page}`;\n  const { data, error, isValidating } = useSwr(path ? url : null, fetcher);\n\n  useEffect(() => {\n    dispatch({ type: \"setLoadingStatus\", payload: isValidating });\n  }, [isValidating, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      const apiCount = Math.ceil(data.total_count / PAGE_SIZE);\n      const normalizeCountWithGithubLimits = () => {\n        if (apiCount <= 1000) {\n          return apiCount;\n        }\n\n        return 1000;\n      };\n      const normalizedCount = normalizeCountWithGithubLimits();\n\n      if (normalizedCount !== count) {\n        dispatch({ type: \"setTotalPages\", payload: normalizedCount });\n      }\n\n      if (targetUser === \"\") {\n        const user = getRandomUser(data.items);\n\n        dispatch({ type: \"setTargetUser\", payload: user.login });\n      }\n    }\n  }, [data, dispatch, count, targetUser]);\n\n  return {\n    data,\n    error,\n    isValidating,\n  };\n};\n","import React, {\n  createContext,\n  ChangeEvent,\n  FunctionComponent,\n  ReactNode,\n  useReducer,\n} from \"react\";\nimport { PAGE_SIZE } from \"../api/useRequest\";\n\ntype FormFields = {\n  query: string;\n};\n\ntype State = {\n  form: FormFields;\n  searchParam: string;\n  page: number;\n  count: number;\n  loading: boolean;\n  targetUser: string;\n  appStatus: string;\n};\n\ntype Action =\n  | { type: \"setSearchParam\" }\n  | { type: \"setPage\"; payload: number }\n  | { type: \"setTotalPages\"; payload: number }\n  | { type: \"setLoadingStatus\"; payload: boolean }\n  | { type: \"setTargetUser\"; payload: string }\n  | { type: \"setAppStatus\"; payload: \"initial\" | \"playing\" | \"winner\" | \"lose\" | \"try-again\" }\n  | { type: \"updateForm\"; payload: object };\n\nconst initialState: State = {\n  form: { query: \"\" },\n  searchParam: \"\",\n  page: 1,\n  count: 1,\n  loading: false,\n  targetUser: \"\",\n  appStatus: \"initial\",\n};\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"setSearchParam\":\n      return { ...state, searchParam: state.form.query };\n    case \"setPage\":\n      return { ...state, page: action.payload };\n    case \"setLoadingStatus\":\n      return { ...state, loading: action.payload };\n    case \"setTargetUser\":\n      return { ...state, targetUser: action.payload };\n    case \"setAppStatus\":\n      return { ...state, appStatus: action.payload };\n    case \"setTotalPages\":\n      return { ...state, count: Math.ceil(action.payload / PAGE_SIZE) };\n    case \"updateForm\":\n      return { ...state, form: { ...state.form, ...action.payload } };\n    default:\n      throw new Error();\n  }\n}\n\nexport const FormContext = createContext<{\n  changePageHandler: (event: any, value: number) => void;\n  form: { query: string };\n  page: number;\n  searchParam: string;\n  count: number;\n  loading: boolean;\n  targetUser: string;\n  appStatus: string;\n  updateField: (e: ChangeEvent<HTMLInputElement>) => void;\n  dispatch: any;\n}>({\n  ...initialState,\n  changePageHandler: () => {},\n  updateField: () => {},\n  dispatch: () => {},\n});\n\nexport const FormProvider: FunctionComponent<{\n  children: ReactNode;\n}> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const changePageHandler = (event: any, value: number) => {\n    dispatch({ type: \"setPage\", payload: value });\n  };\n\n  const updateField = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: \"updateForm\",\n      payload: {\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  return (\n    <FormContext.Provider\n      value={{\n        form: state.form,\n        page: state.page,\n        searchParam: state.searchParam,\n        count: state.count,\n        loading: state.loading,\n        targetUser: state.targetUser,\n        appStatus: state.appStatus,\n        updateField,\n        changePageHandler,\n        dispatch,\n      }}\n    >\n      {children}\n    </FormContext.Provider>\n  );\n};\n","import React, { useContext, FormEvent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { FormContext } from \"../resources/Form\";\n\nconst Search = () => {\n  const { form, updateField, dispatch, loading, appStatus } = useContext(\n    FormContext\n  );\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!loading && appStatus !== \"playing\") {\n      dispatch({ type: \"setSearchParam\" });\n      dispatch({ type: \"setAppStatus\", payload: \"playing\" });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={10}>\n          <TextField\n            value={form.query}\n            onChange={updateField}\n            name=\"query\"\n            placeholder=\"Search Github\"\n            label=\"Search Github\"\n            variant=\"outlined\"\n            fullWidth\n            autoComplete=\"off\"\n            type=\"search\"\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <Button variant=\"contained\" type=\"submit\" disabled={loading}>\n            Search\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nexport default Search;\n","import React, {\n  FunctionComponent,\n  useState,\n  MouseEvent,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport { ItemType } from \"../api/useRequest\";\nimport { FormContext } from \"../resources/Form\";\n\nconst User: FunctionComponent<ItemType> = ({\n  login,\n  avatar_url,\n  html_url,\n  type,\n  followers_url,\n  subscriptions_url,\n  organizations_url,\n  repos_url,\n}) => {\n  const [openSnackbar, setOpenSnackbar] = useState<Boolean>(false);\n  const open = (url: string) => {\n    window.open(url);\n  };\n\n  const [anchorEl, setAnchorEl] = useState<any>(null);\n  const { targetUser, dispatch, appStatus } = useContext(FormContext);\n\n  useEffect(() => {\n    if (!openSnackbar && appStatus === \"lose\") {\n      setOpenSnackbar(true);\n    }\n  }, [appStatus, setOpenSnackbar, openSnackbar]);\n\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (url: string) => {\n    setAnchorEl(null);\n\n    if (typeof url === \"string\") {\n      open(url);\n    }\n  };\n\n  const closeSnackBar = (event: any, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  const getSeverity = () => {\n    if (appStatus === \"winner\") {\n      return \"success\";\n    }\n\n    if (appStatus === \"try-again\") {\n      return \"warning\";\n    }\n\n    if (appStatus === \"lose\") {\n      return \"error\";\n    }\n  };\n  const messages = {\n    warning: \"Try Again!\",\n    error: \"You Lose!\",\n    success: \"You Nailed It!!!!! :D\",\n  };\n  const severity = getSeverity() || \"success\";\n\n  return (\n    <Card>\n      <CardHeader\n        avatar={<Avatar aria-label=\"avatar\" alt={login} src={avatar_url} />}\n        action={\n          <>\n            <IconButton aria-label=\"settings\" onClick={handleClick}>\n              <MoreVertIcon />\n            </IconButton>\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={() => open(html_url)}>\n                Go to Profile Page\n              </MenuItem>\n              <MenuItem onClick={() => handleClose(followers_url)}>\n                Followers\n              </MenuItem>\n              <MenuItem onClick={() => handleClose(subscriptions_url)}>\n                Subscriptions\n              </MenuItem>\n              <MenuItem onClick={() => handleClose(organizations_url)}>\n                Organizations\n              </MenuItem>\n              <MenuItem onClick={() => handleClose(repos_url)}>\n                Repositories\n              </MenuItem>\n            </Menu>\n          </>\n        }\n        title={type}\n        subheader={login}\n      />\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => {\n            if (login === targetUser) {\n              dispatch({ type: \"setAppStatus\", payload: \"winner\" });\n              setOpenSnackbar(true);\n            } else {\n              dispatch({ type: \"setAppStatus\", payload: \"try-again\" });\n              setOpenSnackbar(true);\n            }\n          }}\n        >\n          Verify!\n        </Button>\n        <Snackbar\n          open={Boolean(openSnackbar)}\n          autoHideDuration={6000}\n          onClose={closeSnackBar}\n        >\n          <MuiAlert onClose={closeSnackBar} severity={severity}>\n            {messages[severity]}\n          </MuiAlert>\n        </Snackbar>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default User;\n","import React, { useContext } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport User from \"./User\";\nimport { FormContext } from \"../resources/Form\";\nimport { useRequest } from \"../api\";\nimport { ItemType } from \"../api/useRequest\";\n\nconst Results = () => {\n  const { searchParam, page, changePageHandler, count } = useContext(\n    FormContext\n  );\n  const { data, error, isValidating } = useRequest(\n    searchParam ? `/users?q=${searchParam}` : undefined\n  );\n\n  if (error) return <div>failed to load</div>;\n  if (isValidating) return <div>loading...</div>;\n\n  return (\n    <Grid container spacing={4}>\n      {data?.items?.map((item: ItemType) => (\n        <Grid item xs={4} key={item.id}>\n          <User {...item} />\n        </Grid>\n      ))}\n      {count > 1 && (\n        <Grid item xs={12}>\n          <Pagination count={count} page={page} onChange={changePageHandler} />\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport { useHistory } from \"react-router-dom\";\nimport { ListItem, ListItemText, Button } from \"@material-ui/core\";\n\nconst Home = () => {\n  const history = useHistory();\n  const handleClick = () => {\n    history.push(\"/game\");\n  };\n\n  return (\n    <div>\n      <h1>Welcome to the GitHub user search game by xthecapx</h1>\n      <h2>Instructions</h2>\n      <List dense>\n        <ListItem>\n          <ListItemText primary=\"1. Search for an user\" />\n        </ListItem>\n        <ListItem>\n          <ListItemText primary=\"2. Click on the user requested before the timer ends\" />\n        </ListItem>\n      </List>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n        Start Game\n      </Button>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useState, useRef, useContext, useEffect } from \"react\";\nimport { FormContext } from \"../resources/Form\";\n\nconst TIME_LIMIT = 30;\n\nconst useTimer = () => {\n  const [seconds, setSeconds] = useState(TIME_LIMIT);\n  const intervalRef: any = useRef();\n  const { searchParam, loading, targetUser, dispatch, appStatus } = useContext(\n    FormContext\n  );\n  const isActive =\n    searchParam &&\n    !loading &&\n    (appStatus === \"playing\" || appStatus === \"try-again\");\n  const clearIntervalRef = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = undefined;\n    }\n  };\n  const start = () => {\n    if (!intervalRef.current) {\n      intervalRef.current = setInterval(\n        () => setSeconds((seconds) => seconds - 1),\n        1000\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (isActive) {\n      start();\n    }\n    return clearIntervalRef;\n  }, [isActive]);\n\n  return {\n    seconds,\n    appStatus,\n    targetUser,\n    dispatch,\n  };\n};\n\nexport default useTimer;\n","import React, { useEffect } from \"react\";\nimport useTimer from \"./useTimer\";\n\nconst Timer = () => {\n  const { seconds, appStatus, targetUser, dispatch } = useTimer();\n\n  useEffect(() => {\n    if (seconds <= 0) {\n      dispatch({ type: \"setAppStatus\", payload: \"lose\" });\n    }\n  }, [seconds, dispatch]);\n\n  if (appStatus === \"winner\") {\n    return <h3>{\"Your Nailed it !!!!!!\"}</h3>;\n  }\n\n  if (appStatus === \"lose\" || seconds <= 0) {\n    return <h3>{\"Timeout! You Lose!\"}</h3>;\n  }\n\n  if (appStatus === \"playing\" || appStatus === \"try-again\") {\n    return (\n      <h3 className=\"time\">\n        {seconds}s left to find <strong>{targetUser}</strong>\n      </h3>\n    );\n  }\n\n  return <h3>Waiting for any query</h3>;\n};\n\nexport default Timer;\n","import React from \"react\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport Home from \"./components/Home\";\nimport Timer from \"./components/Timer\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { FormProvider } from \"./resources/Form\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <FormProvider>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/game\">\n              <Search />\n              <Timer />\n              <Results />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/\" />\n            </Route>\n          </Switch>\n        </div>\n      </FormProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}